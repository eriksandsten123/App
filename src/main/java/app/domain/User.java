package app.domain;

import javax.persistence.*;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.io.Serializable;
import java.util.Objects;
import java.util.Set;

@Entity
@Table(name = "user_profile")
public class User implements Serializable {
    // An autogenerated id (unique for each user in the db)
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;

    @NotNull
    @Size(min = 2, max = 30)
    private String name;

    private Gender gender;

    private String profilePicture;

    @NotNull
    @Min(18)
    @Max(120)
    private Integer age;

    @Column(length = 4096)
    private String presentation;

    // TODO: Dont use FetchType.EAGER
    @OneToMany(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, targetEntity = User.class, fetch = FetchType.EAGER)
    @JoinTable(name = "tbl_friends")
    private Set<User> favorites;

    @Column(name = "interest")
    @ElementCollection(fetch = FetchType.EAGER)
    @Enumerated(EnumType.STRING)
    private Set<Interest> interests;

    public long getId() {
        return id;
    }

    public void setId(final long id) {
        this.id = id;
    }

    public Gender getGender() {
        return gender;
    }

    public void setGender(Gender gender) {
        this.gender = gender;
    }

    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getProfilePicture() {
        return profilePicture;
    }

    public void setProfilePicture(final String profilePicture) {
        this.profilePicture = profilePicture;
    }

    public Integer getAge() {
        return age;
    }

    public void setAge(Integer age) {
        this.age = age;
    }

    public String getPresentation() {
        return presentation;
    }

    public void setPresentation(final String presentation) {
        this.presentation = presentation;
    }

    public Set<User> getFavorites() {
        return favorites;
    }

    public void setFavorites(final Set<User> favorites) {
        this.favorites = favorites;
    }

    public Set<Interest> getInterests() {
        return interests;
    }

    public void setInterests(final Set<Interest> interests) {
        this.interests = interests;
    }

    public User() {
    }

    public User(final long id, final String name) {
        this.id = id;
        this.name = name;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        User user = (User) o;
        return id == user.id &&
                Objects.equals(name, user.name) &&
                gender == user.gender &&
                Objects.equals(profilePicture, user.profilePicture) &&
                Objects.equals(age, user.age) &&
                Objects.equals(presentation, user.presentation) &&
                Objects.equals(favorites, user.favorites);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id);
    }

    @Override
    public String toString() {
        return "Person(Name: " + this.name + ", Age: " + this.age + ")";
    }
}